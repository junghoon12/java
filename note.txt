# 디자인 패턴
  - 디자인 패턴은 설계 문제의 해답이라고 할 수 있음.
  - 웹 프로그래밍은 백엔드, 프론트 프로그래머와 기획자, 디자이너까지
    다양한 영역의 사람들이 얽혀서 일을 함. 그래서 종종 다툼이 생기기도 함.
    백엔드 쪽 일도 한사람이 전담하기보다 DB 엔지니어의 설계를 전달받아
    적용하기도 하고, 로직을 만들고 수정하기도 함. 웹 서버와 연동도 생각해야 함.
  - 이렇게 복잡한 형태로 일을 해야 하기 때문에 설계 상의 문제가 발생할 수 있음.
    디자인 패턴은 웹 프로그래밍에서만 사용하는 설계 기법은 아님. 그러나
    웹 프로그래밍에서는 업무를 진행하는데 있어서 실제로 발생하는 문제를 해결하기
    위해 사용하고 있음. 바로 프론트엔드와 백엔드 코드의 분리 그리고 로직과
    DB의 분리임.
  - 디자인 패턴도 프레임워크도 없이 웹 프로그래밍을 할 때는 하나의 스크립트에
    서버에서 처리해야 하는 로직과 프론트로 전달되어야 하는 html 코드까지 다
    섞여 있었음. 그래서 프론트를 수정해야 하는 문제에서도 서버 쪽 스크립트를
    만지는 일이 생겼고 이를 수정하면서 실수를 하게 되면 로직 코드에도 문제가
    발생할 수 었었음.
  - 이런 문제들을 해결하기 위해 화면 출력을 위한 HTML 코드를 별도의 파일로
    빼내고, 서버 쪽 코드는 다시 DB 구조를 위한 파일, 기능을 위한 파일을
    분리해 내는 디자인 패턴 방식을 사용하기 시작하였음. 이렇게 하면 변경이
    필요한 각 부분의 파일만 별도로 수정할 수 있기 때문에 다틈이나 위험부담
    없이 수정이 가능하게 된 것임.
  - 장고에서는 이러한 특별한 패턴을 이름으로 부르고 있음. 바로 MTV임

  - 웹 프로그래밍에서 자주 사용되는 디자인 패턴은 MVC임.
    Model - View - Controller의 약어임.

  - 장고에서 MTV의 기능을 살펴 보자.
    * Model : DB의 구조를 결정함. 대부분의 경우 테이블을 작성할 때 사용하는데
              테이블의 이름, 각 열의 이름과 타입 등을 설계할 때 사용함.
    * View(Template) : 사용자에게 보여지는 UI 부분임. HTML 코드 등 실질적으로
                       클라이언트에게 보여지는 부분임.
    * COntroller : 기능, 로직 부분임. 넘겨 받은 데이터를 어떻게 해석하고 가공할지
                       그리고 처리된 결과를 어떻게 클라이언트에게 돌려줄지 결정하는 부분임.

  - 장고는 보통 1개 이상의 앱을 가지고 있음.
    여기에 앱은 '블로그 기능', '단일 페이지 보여주기 기능' 등과 같이 특정 기능을
    수행하는 단위 모듈을 말함.

  - 앱을 만들면 앱에 해당하는 폴더가 만들어 지고, 폴더 안에 여러 개의 파일이 만들어짐.
    * models.py
      - 모델(Model)은 DB의 구조를 결정한다고 이야기 했음. 장고에서는 models.py
        파일을 통해 DB의 명세를 관리함. 모델은 클래스로 만드는데 클래스의 이름이
        테이블의 이름이 되고 클래스의 속성들이 DB의 컬럼이 됨.
      - 속성의 값이 컬럼의 데이터 타입과 제약 사항을 결정함. 또 모델을 이용하여
        DB의 종류에 상관없이 그리고 프로그래머가 SQL을 모르더라도 DB를 편하게
        이용할 수 있도록 ORM이라는 기능을 사용함.
        ORM(Object Relational Mapping)은 객체를 이용해 관계형 DB를 이용할 수
        있게 해 주는 개념임. 장고에서만 사용하는 것이 아니고 다양한 웹 프레임워크에서
        많이 사용하고 있음.
      - DB에 주로 하는 일이 생성, 검색, 수정, 삭제인데 모델을 이용하면 ORM 내부에서
        자동으로 데이터베이스에 할 일을 전달하고 결과를 반환해 줌. 따라서 프로그래머는
        특정 DB에서 사용되는 SQL문이나 API 사용법을 몰라도 웹 애플리케이션을 작성
        할 수 있음. 웹 프로그래머는 다양한 영역을 알아야 한다는 부담감이 있는데 이제는
        ORM 때문에 DB까지 잘 알아야 한다는 부담감은 조금 내려 놓을 수 있게 됨.

    * admin.py
      - 모델을 이용해 DB에 테이블을 생성했다면 이를 추가, 수정, 삭제, 확인이 가능해야 함.
        웹 프로그래밍은 이것을 CRUD(Create-Read-Update-Delete)라고 부르고 웹
        프로그래밍에서 하는 일은 이것이 전부라고 해도 과언이 아님.
      - 모델을 만들고 CRUD 페이지를 만들어야 하지만 모델이 제대로 만들어졌는지 바로
        확인을 하고 싶다면 장고의 기본 관리자 페이지를 사용할 수 있음. 이 때 자신이
        만든 모델을 관리자 페이지에서 확인하거나 특별한 기능을 추가하고 싶다면 admin.py
        파일에 내용을 써 주면 됨.

    * views.py
      - 게시판을 만든다고 할 때 어떤 페이지들이 필요할까요? 앞서 들었더 CRUD를 생각해보면
        글쓰기, 글 보기, 글 수장, 글 삭제 이런 페이지들이 필요할 것임. 이 페이지들을
        하나 하나 만들 때는 views.py에 프로그래밍 해 주면 됨. 뷰(view)를 만든다고
        하는데 이 뷰는 클래스형(Class Based) 뷰와 함수형(Function Based) 뷰 두가지가
        있음. 앞으로 대부분의 프로그래밍 작업은 뷰를 만들고 수정하는 일이 될 것임.

    * urls.py
      - views.py에 어떤 기능을 만들면 해당 기능을 동작시키는 방식은 URL을 통한
        호출 방식이 대부분임. '그러면 어떤 뷰를 동작시킬까'를 결정해야 하는데 이 내용을
        views.py 에 기록을 하면 됨. 보통은 프로젝트 urls.py와 각각 앱에 해당하는
        urls.py 들로 구성을 함.

    * templates.py
      - 보통 HTML 이 들어 있는 파일임. 확장자는 html이 대부분이긴 하지만 안에는
        html이 아닌 템플릿 코드들도 들어 있음. 템플릿 코드의 문법은 어렵지 않기
        때문에 필요할 때마다 익혀 가도록 하면 됨.
